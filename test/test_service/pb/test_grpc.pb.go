// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: test.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_PingEmpty_FullMethodName               = "/glebkap.testproto.TestService/PingEmpty"
	TestService_PingError_FullMethodName               = "/glebkap.testproto.TestService/PingError"
	TestService_Ping_FullMethodName                    = "/glebkap.testproto.TestService/Ping"
	TestService_PingStreamServer_FullMethodName        = "/glebkap.testproto.TestService/PingStreamServer"
	TestService_PingStreamClient_FullMethodName        = "/glebkap.testproto.TestService/PingStreamClient"
	TestService_PingStreamBidirectional_FullMethodName = "/glebkap.testproto.TestService/PingStreamBidirectional"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	PingEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingStreamServer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingStreamServerClient, error)
	PingStreamClient(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamClientClient, error)
	PingStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamBidirectionalClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) PingEmpty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, TestService_PingEmpty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingError(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, TestService_PingError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, TestService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) PingStreamServer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (TestService_PingStreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_PingStreamServer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_PingStreamServerClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingStreamServerClient struct {
	grpc.ClientStream
}

func (x *testServicePingStreamServerClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingStreamClient(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_PingStreamClient_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingStreamClientClient{stream}
	return x, nil
}

type TestService_PingStreamClientClient interface {
	Send(*PingRequest) error
	CloseAndRecv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingStreamClientClient struct {
	grpc.ClientStream
}

func (x *testServicePingStreamClientClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingStreamClientClient) CloseAndRecv() (*PingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) PingStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_PingStreamBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_PingStreamBidirectional_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingStreamBidirectionalClient{stream}
	return x, nil
}

type TestService_PingStreamBidirectionalClient interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type testServicePingStreamBidirectionalClient struct {
	grpc.ClientStream
}

func (x *testServicePingStreamBidirectionalClient) Send(m *PingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServicePingStreamBidirectionalClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	PingEmpty(context.Context, *empty.Empty) (*PingResponse, error)
	PingError(context.Context, *PingRequest) (*empty.Empty, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingStreamServer(*PingRequest, TestService_PingStreamServerServer) error
	PingStreamClient(TestService_PingStreamClientServer) error
	PingStreamBidirectional(TestService_PingStreamBidirectionalServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) PingEmpty(context.Context, *empty.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingEmpty not implemented")
}
func (UnimplementedTestServiceServer) PingError(context.Context, *PingRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingError not implemented")
}
func (UnimplementedTestServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTestServiceServer) PingStreamServer(*PingRequest, TestService_PingStreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStreamServer not implemented")
}
func (UnimplementedTestServiceServer) PingStreamClient(TestService_PingStreamClientServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStreamClient not implemented")
}
func (UnimplementedTestServiceServer) PingStreamBidirectional(TestService_PingStreamBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStreamBidirectional not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_PingEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_PingEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingEmpty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).PingError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_PingError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).PingError(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_PingStreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).PingStreamServer(m, &testServicePingStreamServerServer{stream})
}

type TestService_PingStreamServerServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type testServicePingStreamServerServer struct {
	grpc.ServerStream
}

func (x *testServicePingStreamServerServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_PingStreamClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingStreamClient(&testServicePingStreamClientServer{stream})
}

type TestService_PingStreamClientServer interface {
	SendAndClose(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingStreamClientServer struct {
	grpc.ServerStream
}

func (x *testServicePingStreamClientServer) SendAndClose(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingStreamClientServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_PingStreamBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).PingStreamBidirectional(&testServicePingStreamBidirectionalServer{stream})
}

type TestService_PingStreamBidirectionalServer interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ServerStream
}

type testServicePingStreamBidirectionalServer struct {
	grpc.ServerStream
}

func (x *testServicePingStreamBidirectionalServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServicePingStreamBidirectionalServer) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "glebkap.testproto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingEmpty",
			Handler:    _TestService_PingEmpty_Handler,
		},
		{
			MethodName: "PingError",
			Handler:    _TestService_PingError_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _TestService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingStreamServer",
			Handler:       _TestService_PingStreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingStreamClient",
			Handler:       _TestService_PingStreamClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStreamBidirectional",
			Handler:       _TestService_PingStreamBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
